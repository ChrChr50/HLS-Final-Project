-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_monte_carlo_wibs_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_monte_carlo_wibs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11001101000001", 1 => "11000100101111", 2 => "11111100000100", 
    3 => "11001011111010", 4 => "11111110110100", 5 => "00000100110101", 
    6 => "00000011110010", 7 => "11010000011001", 8 => "00000010101000", 
    9 => "00000011100110", 10 => "11001101101111", 11 => "11001001010010", 
    12 => "11111101111000", 13 => "11000101000000", 14 => "11111110011100", 
    15 => "11001100011011", 16 => "00010010100110", 17 => "00001110000101", 
    18 => "11111010010110", 19 => "00001000111001", 20 => "11111111100101", 
    21 => "00000010110000", 22 => "00000000101100", 23 => "00001110000001", 
    24 => "11111001111010", 25 => "11111101111000", 26 => "00001010010100", 
    27 => "00010001011011", 28 => "00000010001101", 29 => "00001101101011", 
    30 => "11111110000010", 31 => "00001000100011", 32 => "11111110000000", 
    33 => "11111010000100", 34 => "00000000001010", 35 => "11111011101100", 
    36 => "11111110110000", 37 => "00000011001101", 38 => "11111100100000", 
    39 => "00000000010000", 40 => "00000101001110", 41 => "00000010110010", 
    42 => "00000100001011", 43 => "00000001010111", 44 => "00000010000101", 
    45 => "11111110110101", 46 => "11111110011010", 47 => "00000110010111", 
    48 => "00000110110000", 49 => "11111100000100", 50 => "11111011101000", 
    51 => "00000011011010", 52 => "11111011110101", 53 => "00000000101110", 
    54 => "00000100000010", 55 => "11111101001000", 56 => "00000100010110", 
    57 => "11111110000010", 58 => "00000010001001", 59 => "00000000010010", 
    60 => "00000100101010", 61 => "00000111111000", 62 => "00000011000001", 
    63 => "11111100100100", 64 => "00000111110100", 65 => "00000101000110", 
    66 => "00000011100001", 67 => "00001101001001", 68 => "00000010001101", 
    69 => "11111011100010", 70 => "11111000111110", 71 => "00001010100010", 
    72 => "11111110111110", 73 => "11111010110100", 74 => "00001110100111", 
    75 => "00001110101111", 76 => "11111101110000", 77 => "00001010111111", 
    78 => "00000010100011", 79 => "00000100010001", 80 => "11111010111101", 
    81 => "00000011111011", 82 => "11111100010001", 83 => "00000110100001", 
    84 => "11111110100100", 85 => "00000001000001", 86 => "11111101000010", 
    87 => "00000100100010", 88 => "00000101011101", 89 => "00000110101110", 
    90 => "11111001100101", 91 => "00000100000011", 92 => "00000011110000", 
    93 => "00000010000001", 94 => "00000110101001", 95 => "00000111000011", 
    96 => "00000111111101", 97 => "00001000111011", 98 => "11111101100100", 
    99 => "00001000111011", 100 => "11110111101110", 101 => "00000001010001", 
    102 => "00000010010101", 103 => "00001110001011", 104 => "11111001101010", 
    105 => "11111010100111", 106 => "00000011011001", 107 => "00001110101110", 
    108 => "00000001001111", 109 => "00000111101101", 110 => "11111111100000", 
    111 => "00000110011011", 112 => "00001010011110", 113 => "00001100000000", 
    114 => "11111100001110", 115 => "00000101111011", 116 => "00000100010000", 
    117 => "00000011110111", 118 => "11111110110100", 119 => "00001000100001", 
    120 => "11111100111111", 121 => "11111001001000", 122 => "00001011000001", 
    123 => "00010001111101", 124 => "11111101111010", 125 => "00001110000001", 
    126 => "11111000010010", 127 => "00010001110111", 128 => "00001100001101", 
    129 => "00001000010110", 130 => "11111001111110", 131 => "00001101110111", 
    132 => "00000000100000", 133 => "11111010101000", 134 => "11111101110000", 
    135 => "00001101010111", 136 => "11111111100001", 137 => "00000011100010", 
    138 => "00001011110010", 139 => "00010000110111", 140 => "00000001011000", 
    141 => "00001100111000", 142 => "00000010110011", 143 => "00001011010001", 
    144 => "11111101010110", 145 => "11111001001011", 146 => "00000110011011", 
    147 => "11111101110011", 148 => "00000000011001", 149 => "00000000010010", 
    150 => "00000110101110", 151 => "11111101101101", 152 => "00000101111010", 
    153 => "00000101100111", 154 => "00000100000110", 155 => "11111101100010", 
    156 => "00000011100110", 157 => "11111100101000", 158 => "11111101100000", 
    159 => "00000100101111", 160 => "00001000111011", 161 => "00001111101001", 
    162 => "11111101111101", 163 => "00000011011111", 164 => "11111010010001", 
    165 => "00000000110001", 166 => "00000000010011", 167 => "00001110001001", 
    168 => "00000101111001", 169 => "11111100001101", 170 => "00000101101010", 
    171 => "00000110111000", 172 => "00000100000010", 173 => "00001001010100", 
    174 => "00000011011001", 175 => "00001001011001", 176 => "11111111110010", 
    177 => "00000111001000", 178 => "11111011110111", 179 => "00000010001101", 
    180 => "11111100001001", 181 => "11111001000100", 182 => "00000000100001", 
    183 => "00000000111110", 184 => "11111100010001", 185 => "00000010001000", 
    186 => "11111010010110", 187 => "11111111110100", 188 => "11111011010000", 
    189 => "11111011011000", 190 => "11111111001110", 191 => "11111011101110", 
    192 => "00001010100101", 193 => "00001111001110", 194 => "00000100000100", 
    195 => "00001101000010", 196 => "00000000000110", 197 => "11111111111000", 
    198 => "00000001000011", 199 => "00001101110110", 200 => "00000010011010", 
    201 => "11111010110100", 202 => "00001100011010", 203 => "00010000011111", 
    204 => "00000000111110", 205 => "00001011111100", 206 => "11111001110110", 
    207 => "00000100111010", 208 => "00001010011000", 209 => "00010001110101", 
    210 => "00000000000010", 211 => "00001110000000", 212 => "00000000100011", 
    213 => "11111111100111", 214 => "00000101101001", 215 => "00001111000010", 
    216 => "00000101000001", 217 => "00000100100000", 218 => "00000101110101", 
    219 => "00010010011110", 220 => "11111001101011", 221 => "00001101101010", 
    222 => "00000101010011", 223 => "00000111011001", 224 => "01000001111100", 
    225 => "01000000111000", 226 => "00000000110010", 227 => "00111001111111", 
    228 => "11111011010110", 229 => "11111010001000", 230 => "11111011000110", 
    231 => "01000001111111", 232 => "11111010010101", 233 => "00000101011100", 
    234 => "00111001111001", 235 => "00111111011110", 236 => "00000000000001", 
    237 => "00111001100100", 238 => "00000000010010", 239 => "00111101100011", 
    240 => "00001100010000", 241 => "00001000011000", 242 => "11111110100000", 
    243 => "00000111010100", 244 => "11111110010110", 245 => "11111110101111", 
    246 => "11111011011010", 247 => "00001100100000", 248 => "11111101101001", 
    249 => "11111011001111", 250 => "00001110100100", 251 => "00001010000001", 
    252 => "11111100010100", 253 => "00001110101001", 254 => "11111110111110", 
    255 => "00001111010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_monte_carlo_wibs is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_monte_carlo_wibs is
    component mlp_monte_carlo_wibs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_monte_carlo_wibs_rom_U :  component mlp_monte_carlo_wibs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


