// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.702000,HLS_SYN_LAT=1126917,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=8,HLS_SYN_FF=1038,HLS_SYN_LUT=1896,HLS_VERSION=2019_2}" *)

module dut (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strm_in_V_V_dout,
        strm_in_V_V_empty_n,
        strm_in_V_V_read,
        strm_out_V_V_din,
        strm_out_V_V_full_n,
        strm_out_V_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] strm_in_V_V_dout;
input   strm_in_V_V_empty_n;
output   strm_in_V_V_read;
output  [15:0] strm_out_V_V_din;
input   strm_out_V_V_full_n;
output   strm_out_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg strm_in_V_V_read;
reg[15:0] strm_out_V_V_din;
reg strm_out_V_V_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    strm_in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln22_fu_128_p2;
reg    strm_out_V_V_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [3:0] i_fu_134_p2;
reg    ap_block_state2;
reg   [15:0] variance_output_V_reg_162;
wire    grp_mlp_monte_carlo_fu_103_ap_ready;
wire    grp_mlp_monte_carlo_fu_103_ap_done;
reg   [3:0] input_V_address0;
reg    input_V_ce0;
reg    input_V_we0;
wire   [15:0] input_V_q0;
wire    grp_mlp_monte_carlo_fu_103_ap_start;
wire    grp_mlp_monte_carlo_fu_103_ap_idle;
wire   [3:0] grp_mlp_monte_carlo_fu_103_input_V_address0;
wire    grp_mlp_monte_carlo_fu_103_input_V_ce0;
wire   [15:0] grp_mlp_monte_carlo_fu_103_ap_return_0;
wire   [15:0] grp_mlp_monte_carlo_fu_103_ap_return_1;
reg   [3:0] i_0_reg_92;
reg    grp_mlp_monte_carlo_fu_103_ap_start_reg;
reg    ap_block_state2_ignore_call0;
wire   [63:0] zext_ln23_fu_140_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_mlp_monte_carlo_fu_103_ap_start_reg = 1'b0;
end

dut_input_V #(
    .DataWidth( 16 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
input_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_V_address0),
    .ce0(input_V_ce0),
    .we0(input_V_we0),
    .d0(strm_in_V_V_dout),
    .q0(input_V_q0)
);

mlp_monte_carlo grp_mlp_monte_carlo_fu_103(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mlp_monte_carlo_fu_103_ap_start),
    .ap_done(grp_mlp_monte_carlo_fu_103_ap_done),
    .ap_idle(grp_mlp_monte_carlo_fu_103_ap_idle),
    .ap_ready(grp_mlp_monte_carlo_fu_103_ap_ready),
    .input_V_address0(grp_mlp_monte_carlo_fu_103_input_V_address0),
    .input_V_ce0(grp_mlp_monte_carlo_fu_103_input_V_ce0),
    .input_V_q0(input_V_q0),
    .ap_return_0(grp_mlp_monte_carlo_fu_103_ap_return_0),
    .ap_return_1(grp_mlp_monte_carlo_fu_103_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mlp_monte_carlo_fu_103_ap_start_reg <= 1'b0;
    end else begin
        if ((~((icmp_ln22_fu_128_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln22_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_mlp_monte_carlo_fu_103_ap_start_reg <= 1'b1;
        end else if ((grp_mlp_monte_carlo_fu_103_ap_ready == 1'b1)) begin
            grp_mlp_monte_carlo_fu_103_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_92 <= 4'd0;
    end else if ((~((icmp_ln22_fu_128_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln22_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_92 <= i_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((grp_mlp_monte_carlo_fu_103_ap_done == 1'b0) | (strm_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        variance_output_V_reg_162 <= grp_mlp_monte_carlo_fu_103_ap_return_1;
    end
end

always @ (*) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_V_address0 = zext_ln23_fu_140_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_V_address0 = grp_mlp_monte_carlo_fu_103_input_V_address0;
    end else begin
        input_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((icmp_ln22_fu_128_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln22_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_V_ce0 = grp_mlp_monte_carlo_fu_103_input_V_ce0;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln22_fu_128_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln22_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_V_we0 = 1'b1;
    end else begin
        input_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        strm_in_V_V_blk_n = strm_in_V_V_empty_n;
    end else begin
        strm_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln22_fu_128_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln22_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        strm_in_V_V_read = 1'b1;
    end else begin
        strm_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        strm_out_V_V_blk_n = strm_out_V_V_full_n;
    end else begin
        strm_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        strm_out_V_V_din = variance_output_V_reg_162;
    end else if ((~((grp_mlp_monte_carlo_fu_103_ap_done == 1'b0) | (strm_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        strm_out_V_V_din = grp_mlp_monte_carlo_fu_103_ap_return_0;
    end else begin
        strm_out_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | (~((grp_mlp_monte_carlo_fu_103_ap_done == 1'b0) | (strm_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        strm_out_V_V_write = 1'b1;
    end else begin
        strm_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln22_fu_128_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln22_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln22_fu_128_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln22_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((grp_mlp_monte_carlo_fu_103_ap_done == 1'b0) | (strm_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state2 = ((icmp_ln22_fu_128_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_ignore_call0 = ((icmp_ln22_fu_128_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0));
end

assign grp_mlp_monte_carlo_fu_103_ap_start = grp_mlp_monte_carlo_fu_103_ap_start_reg;

assign i_fu_134_p2 = (i_0_reg_92 + 4'd1);

assign icmp_ln22_fu_128_p2 = ((i_0_reg_92 == 4'd9) ? 1'b1 : 1'b0);

assign zext_ln23_fu_140_p1 = i_0_reg_92;

endmodule //dut
