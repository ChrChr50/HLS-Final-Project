// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mlp_monte_carlo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 50'd1;
parameter    ap_ST_fsm_state2 = 50'd2;
parameter    ap_ST_fsm_state3 = 50'd4;
parameter    ap_ST_fsm_state4 = 50'd8;
parameter    ap_ST_fsm_state5 = 50'd16;
parameter    ap_ST_fsm_state6 = 50'd32;
parameter    ap_ST_fsm_state7 = 50'd64;
parameter    ap_ST_fsm_state8 = 50'd128;
parameter    ap_ST_fsm_state9 = 50'd256;
parameter    ap_ST_fsm_state10 = 50'd512;
parameter    ap_ST_fsm_state11 = 50'd1024;
parameter    ap_ST_fsm_state12 = 50'd2048;
parameter    ap_ST_fsm_state13 = 50'd4096;
parameter    ap_ST_fsm_state14 = 50'd8192;
parameter    ap_ST_fsm_state15 = 50'd16384;
parameter    ap_ST_fsm_state16 = 50'd32768;
parameter    ap_ST_fsm_state17 = 50'd65536;
parameter    ap_ST_fsm_state18 = 50'd131072;
parameter    ap_ST_fsm_state19 = 50'd262144;
parameter    ap_ST_fsm_state20 = 50'd524288;
parameter    ap_ST_fsm_state21 = 50'd1048576;
parameter    ap_ST_fsm_state22 = 50'd2097152;
parameter    ap_ST_fsm_state23 = 50'd4194304;
parameter    ap_ST_fsm_state24 = 50'd8388608;
parameter    ap_ST_fsm_state25 = 50'd16777216;
parameter    ap_ST_fsm_state26 = 50'd33554432;
parameter    ap_ST_fsm_state27 = 50'd67108864;
parameter    ap_ST_fsm_state28 = 50'd134217728;
parameter    ap_ST_fsm_state29 = 50'd268435456;
parameter    ap_ST_fsm_state30 = 50'd536870912;
parameter    ap_ST_fsm_state31 = 50'd1073741824;
parameter    ap_ST_fsm_state32 = 50'd2147483648;
parameter    ap_ST_fsm_state33 = 50'd4294967296;
parameter    ap_ST_fsm_state34 = 50'd8589934592;
parameter    ap_ST_fsm_state35 = 50'd17179869184;
parameter    ap_ST_fsm_state36 = 50'd34359738368;
parameter    ap_ST_fsm_state37 = 50'd68719476736;
parameter    ap_ST_fsm_state38 = 50'd137438953472;
parameter    ap_ST_fsm_state39 = 50'd274877906944;
parameter    ap_ST_fsm_state40 = 50'd549755813888;
parameter    ap_ST_fsm_state41 = 50'd1099511627776;
parameter    ap_ST_fsm_state42 = 50'd2199023255552;
parameter    ap_ST_fsm_state43 = 50'd4398046511104;
parameter    ap_ST_fsm_state44 = 50'd8796093022208;
parameter    ap_ST_fsm_state45 = 50'd17592186044416;
parameter    ap_ST_fsm_state46 = 50'd35184372088832;
parameter    ap_ST_fsm_state47 = 50'd70368744177664;
parameter    ap_ST_fsm_state48 = 50'd140737488355328;
parameter    ap_ST_fsm_state49 = 50'd281474976710656;
parameter    ap_ST_fsm_state50 = 50'd562949953421312;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_V_address0;
output   input_V_ce0;
input  [15:0] input_V_q0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;

(* fsm_encoding = "none" *) reg   [49:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] b1_V_address0;
reg    b1_V_ce0;
wire   [15:0] b1_V_q0;
wire   [9:0] w1_V_address0;
reg    w1_V_ce0;
wire   [14:0] w1_V_q0;
wire   [4:0] b2_V_address0;
reg    b2_V_ce0;
wire   [14:0] b2_V_q0;
wire   [10:0] w2_V_address0;
reg    w2_V_ce0;
wire   [14:0] w2_V_q0;
wire   [3:0] b3_V_address0;
reg    b3_V_ce0;
wire   [14:0] b3_V_q0;
wire   [8:0] w3_V_address0;
reg    w3_V_ce0;
wire   [12:0] w3_V_q0;
wire   [3:0] b4_V_address0;
reg    b4_V_ce0;
wire   [14:0] b4_V_q0;
wire   [7:0] w4_V_address0;
reg    w4_V_ce0;
wire   [13:0] w4_V_q0;
wire   [3:0] w5_V_0_address0;
reg    w5_V_0_ce0;
wire   [11:0] w5_V_0_q0;
reg   [6:0] outputs_V_address0;
reg    outputs_V_ce0;
reg    outputs_V_we0;
wire   [15:0] outputs_V_q0;
wire   [6:0] i_12_fu_829_p2;
reg   [6:0] i_12_reg_1687;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln59_fu_835_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] add_ln60_fu_847_p2;
wire    ap_CS_fsm_state4;
wire   [3:0] add_ln61_fu_859_p2;
wire    ap_CS_fsm_state5;
wire   [3:0] add_ln62_fu_871_p2;
wire    ap_CS_fsm_state6;
wire   [6:0] i_2_fu_889_p2;
reg   [6:0] i_2_reg_1727;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln15_fu_895_p1;
reg   [63:0] zext_ln15_reg_1732;
wire   [0:0] icmp_ln14_fu_883_p2;
wire   [10:0] zext_ln15_4_fu_900_p1;
reg   [10:0] zext_ln15_4_reg_1742;
wire    ap_CS_fsm_state8;
wire   [3:0] j_fu_910_p2;
reg   [3:0] j_reg_1755;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln16_fu_904_p2;
wire    ap_CS_fsm_state10;
reg  signed [14:0] w1_V_load_reg_1770;
wire    ap_CS_fsm_state11;
wire   [6:0] i_3_fu_973_p2;
reg   [6:0] i_3_reg_1783;
wire    ap_CS_fsm_state12;
reg   [5:0] dense0_V_addr_reg_1788;
wire   [0:0] icmp_ln25_fu_967_p2;
wire   [6:0] i_4_fu_998_p2;
reg   [6:0] i_4_reg_1799;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln35_fu_1004_p1;
reg   [63:0] zext_ln35_reg_1804;
wire   [0:0] icmp_ln34_fu_992_p2;
wire   [5:0] i_5_fu_1015_p2;
reg   [5:0] i_5_reg_1817;
wire    ap_CS_fsm_state16;
wire   [63:0] zext_ln15_1_fu_1021_p1;
reg   [63:0] zext_ln15_1_reg_1822;
wire   [0:0] icmp_ln14_1_fu_1009_p2;
wire   [12:0] zext_ln15_5_fu_1026_p1;
reg   [12:0] zext_ln15_5_reg_1832;
wire    ap_CS_fsm_state17;
wire  signed [15:0] sext_ln15_fu_1030_p1;
wire   [6:0] j_1_fu_1040_p2;
reg   [6:0] j_1_reg_1845;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln16_1_fu_1034_p2;
wire   [15:0] dropout0_V_q0;
reg  signed [15:0] dropout0_V_load_reg_1860;
wire    ap_CS_fsm_state19;
reg  signed [14:0] w2_V_load_reg_1865;
wire    ap_CS_fsm_state20;
wire   [5:0] i_6_fu_1102_p2;
reg   [5:0] i_6_reg_1878;
wire    ap_CS_fsm_state21;
reg   [4:0] dense1_V_addr_reg_1883;
wire   [0:0] icmp_ln25_1_fu_1096_p2;
wire   [5:0] i_7_fu_1127_p2;
reg   [5:0] i_7_reg_1894;
wire    ap_CS_fsm_state23;
wire   [63:0] zext_ln35_1_fu_1133_p1;
reg   [63:0] zext_ln35_1_reg_1899;
wire   [0:0] icmp_ln34_1_fu_1121_p2;
wire   [4:0] i_9_fu_1144_p2;
reg   [4:0] i_9_reg_1912;
wire    ap_CS_fsm_state25;
wire   [63:0] zext_ln15_2_fu_1150_p1;
reg   [63:0] zext_ln15_2_reg_1917;
wire   [0:0] icmp_ln14_2_fu_1138_p2;
wire   [10:0] zext_ln15_6_fu_1155_p1;
reg   [10:0] zext_ln15_6_reg_1927;
wire    ap_CS_fsm_state26;
wire  signed [15:0] sext_ln15_1_fu_1159_p1;
wire   [5:0] j_2_fu_1169_p2;
reg   [5:0] j_2_reg_1940;
wire    ap_CS_fsm_state27;
wire   [0:0] icmp_ln16_2_fu_1163_p2;
wire    ap_CS_fsm_state28;
reg  signed [12:0] w3_V_load_reg_1955;
wire    ap_CS_fsm_state29;
wire   [4:0] i_8_fu_1232_p2;
reg   [4:0] i_8_reg_1968;
wire    ap_CS_fsm_state31;
wire   [63:0] zext_ln35_2_fu_1238_p1;
reg   [63:0] zext_ln35_2_reg_1973;
wire   [0:0] icmp_ln34_2_fu_1226_p2;
wire   [4:0] i_11_fu_1249_p2;
reg   [4:0] i_11_reg_1986;
wire    ap_CS_fsm_state33;
wire   [63:0] zext_ln15_3_fu_1255_p1;
reg   [63:0] zext_ln15_3_reg_1991;
wire   [0:0] icmp_ln14_3_fu_1243_p2;
wire   [9:0] zext_ln15_7_fu_1260_p1;
reg   [9:0] zext_ln15_7_reg_2001;
wire    ap_CS_fsm_state34;
wire  signed [15:0] sext_ln15_2_fu_1264_p1;
wire   [4:0] j_3_fu_1274_p2;
reg   [4:0] j_3_reg_2014;
wire    ap_CS_fsm_state35;
wire   [0:0] icmp_ln16_4_fu_1268_p2;
wire    ap_CS_fsm_state36;
reg  signed [13:0] w4_V_load_reg_2029;
wire    ap_CS_fsm_state37;
wire   [4:0] i_10_fu_1337_p2;
reg   [4:0] i_10_reg_2042;
wire    ap_CS_fsm_state39;
wire   [63:0] zext_ln35_3_fu_1343_p1;
reg   [63:0] zext_ln35_3_reg_2047;
wire   [0:0] icmp_ln34_3_fu_1331_p2;
wire   [4:0] add_ln16_fu_1354_p2;
reg   [4:0] add_ln16_reg_2060;
wire    ap_CS_fsm_state41;
wire   [0:0] icmp_ln16_3_fu_1348_p2;
wire   [15:0] dropout3_V_q0;
reg  signed [15:0] dropout3_V_load_reg_2075;
wire    ap_CS_fsm_state42;
reg  signed [11:0] w5_V_0_load_reg_2080;
wire    ap_CS_fsm_state43;
wire   [6:0] i_fu_1400_p2;
reg   [6:0] i_reg_2093;
wire    ap_CS_fsm_state44;
wire   [0:0] icmp_ln41_fu_1394_p2;
wire   [32:0] trunc_ln1148_fu_1415_p1;
reg   [32:0] trunc_ln1148_reg_2103;
reg   [10:0] tmp_reg_2108;
wire   [15:0] sum_V_fu_1427_p2;
wire    ap_CS_fsm_state45;
wire  signed [15:0] p_Val2_3_fu_1477_p3;
reg  signed [15:0] p_Val2_3_reg_2118;
wire    ap_CS_fsm_state46;
wire  signed [16:0] rhs_V_fu_1485_p1;
reg  signed [16:0] rhs_V_reg_2123;
wire   [6:0] i_1_fu_1495_p2;
reg   [6:0] i_1_reg_2131;
wire    ap_CS_fsm_state47;
wire   [0:0] icmp_ln49_fu_1489_p2;
wire   [32:0] trunc_ln1148_1_fu_1510_p1;
reg   [32:0] trunc_ln1148_1_reg_2141;
reg   [10:0] tmp_12_reg_2146;
wire   [16:0] ret_V_fu_1526_p2;
reg   [16:0] ret_V_reg_2151;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
reg   [5:0] dense0_V_address0;
reg    dense0_V_ce0;
reg    dense0_V_we0;
reg   [15:0] dense0_V_d0;
wire   [15:0] dense0_V_q0;
reg   [4:0] dense1_V_address0;
reg    dense1_V_ce0;
reg    dense1_V_we0;
reg   [15:0] dense1_V_d0;
wire   [15:0] dense1_V_q0;
reg   [3:0] dense2_V_address0;
reg    dense2_V_ce0;
reg    dense2_V_we0;
reg   [15:0] dense2_V_d0;
wire   [15:0] dense2_V_q0;
reg   [3:0] dense3_V_address0;
reg    dense3_V_ce0;
reg    dense3_V_we0;
reg   [15:0] dense3_V_d0;
wire   [15:0] dense3_V_q0;
reg   [5:0] dropout0_V_address0;
reg    dropout0_V_ce0;
reg    dropout0_V_we0;
reg   [4:0] dropout1_V_address0;
reg    dropout1_V_ce0;
reg    dropout1_V_we0;
wire  signed [15:0] dropout1_V_q0;
reg   [3:0] dropout2_V_address0;
reg    dropout2_V_ce0;
reg    dropout2_V_we0;
wire  signed [15:0] dropout2_V_q0;
reg   [3:0] dropout3_V_address0;
reg    dropout3_V_ce0;
reg    dropout3_V_we0;
wire    grp_relu_16_s_fu_818_ap_start;
wire    grp_relu_16_s_fu_818_ap_done;
wire    grp_relu_16_s_fu_818_ap_idle;
wire    grp_relu_16_s_fu_818_ap_ready;
wire   [3:0] grp_relu_16_s_fu_818_data_V_address0;
wire    grp_relu_16_s_fu_818_data_V_ce0;
wire    grp_relu_16_s_fu_818_data_V_we0;
wire   [15:0] grp_relu_16_s_fu_818_data_V_d0;
reg   [15:0] grp_relu_16_s_fu_818_data_V_q0;
reg   [6:0] i_0_reg_487;
reg   [5:0] phi_ln59_reg_499;
wire   [0:0] icmp_ln59_fu_841_p2;
wire   [0:0] icmp_ln46_fu_823_p2;
reg   [4:0] phi_ln60_reg_510;
wire   [0:0] icmp_ln60_fu_853_p2;
reg   [3:0] phi_ln61_reg_521;
wire   [0:0] icmp_ln61_fu_865_p2;
reg   [3:0] phi_ln62_reg_532;
wire   [0:0] icmp_ln62_fu_877_p2;
reg   [6:0] i_0_i_reg_543;
reg   [15:0] p_Val2_6_reg_555;
reg   [3:0] j_0_i_reg_566;
reg   [6:0] i_0_i2_reg_578;
wire    ap_CS_fsm_state13;
reg   [6:0] i_0_i4_reg_589;
wire    ap_CS_fsm_state15;
reg   [5:0] i_0_i10_reg_600;
reg   [15:0] p_Val2_8_reg_612;
reg   [6:0] j_0_i15_reg_623;
reg   [5:0] i_0_i30_reg_634;
wire    ap_CS_fsm_state22;
reg   [5:0] i_0_i40_reg_645;
wire    ap_CS_fsm_state24;
reg   [4:0] i_0_i51_reg_656;
reg   [15:0] p_Val2_10_reg_668;
reg   [5:0] j_0_i56_reg_679;
reg   [4:0] i_0_i3_reg_691;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state32;
reg   [4:0] i_0_i71_reg_702;
reg   [15:0] p_Val2_12_reg_714;
reg   [4:0] j_0_i76_reg_725;
reg   [4:0] i_0_i5_reg_737;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state40;
reg   [15:0] dense4_0_V_reg_748;
reg   [4:0] j_0_0_i_reg_761;
reg  signed [15:0] p_Val2_s_reg_772;
reg   [6:0] i_0_i100_reg_784;
reg  signed [15:0] p_Val2_4_reg_795;
reg   [6:0] i_0_i104_reg_807;
reg    grp_relu_16_s_fu_818_ap_start_reg;
wire   [63:0] zext_ln1117_1_fu_933_p1;
wire   [63:0] zext_ln17_fu_938_p1;
wire   [63:0] zext_ln26_fu_979_p1;
wire   [63:0] zext_ln1117_3_fu_1068_p1;
wire   [63:0] zext_ln17_1_fu_1046_p1;
wire   [63:0] zext_ln26_1_fu_1108_p1;
wire   [63:0] zext_ln1117_5_fu_1192_p1;
wire   [63:0] zext_ln17_2_fu_1197_p1;
wire   [63:0] zext_ln1117_7_fu_1297_p1;
wire   [63:0] zext_ln17_4_fu_1302_p1;
wire   [63:0] zext_ln17_3_fu_1360_p1;
wire   [63:0] zext_ln82_fu_1366_p1;
wire   [63:0] zext_ln42_fu_1406_p1;
wire   [63:0] zext_ln50_fu_1501_p1;
wire   [0:0] tmp_13_fu_984_p3;
wire   [0:0] tmp_14_fu_1113_p3;
wire   [9:0] tmp_4_fu_916_p3;
wire   [10:0] zext_ln1117_fu_924_p1;
wire   [10:0] add_ln1117_fu_928_p2;
wire  signed [25:0] grp_fu_1614_p3;
wire   [11:0] tmp_5_fu_1051_p3;
wire   [12:0] zext_ln1117_2_fu_1059_p1;
wire   [12:0] add_ln1117_1_fu_1063_p2;
wire  signed [25:0] grp_fu_1623_p3;
wire   [9:0] tmp_6_fu_1175_p3;
wire   [10:0] zext_ln1117_4_fu_1183_p1;
wire   [10:0] add_ln1117_2_fu_1187_p2;
wire  signed [25:0] grp_fu_1632_p3;
wire   [8:0] tmp_7_fu_1280_p3;
wire   [9:0] zext_ln1117_6_fu_1288_p1;
wire   [9:0] add_ln1117_3_fu_1292_p2;
wire  signed [25:0] grp_fu_1641_p3;
wire  signed [25:0] grp_fu_1650_p3;
wire  signed [33:0] mul_ln1148_fu_1659_p2;
wire   [32:0] sub_ln1148_fu_1433_p2;
wire   [9:0] tmp_9_fu_1446_p4;
wire   [0:0] tmp_8_fu_1438_p3;
wire  signed [15:0] sext_ln1148_1_fu_1456_p1;
wire  signed [15:0] sext_ln1148_2_fu_1460_p1;
wire   [15:0] select_ln1148_fu_1463_p3;
wire   [15:0] sub_ln1148_1_fu_1471_p2;
wire  signed [33:0] mul_ln1148_1_fu_1667_p2;
wire  signed [16:0] lhs_V_fu_1522_p1;
wire  signed [25:0] grp_fu_1675_p3;
wire    ap_CS_fsm_state50;
wire   [32:0] sub_ln1148_2_fu_1551_p2;
wire   [9:0] tmp_11_fu_1564_p4;
wire   [0:0] tmp_10_fu_1556_p3;
wire  signed [15:0] sext_ln1148_4_fu_1574_p1;
wire  signed [15:0] sext_ln1148_5_fu_1578_p1;
wire   [15:0] select_ln1148_2_fu_1581_p3;
wire   [15:0] sub_ln1148_3_fu_1589_p2;
wire   [15:0] select_ln1148_3_fu_1595_p3;
wire   [25:0] grp_fu_1614_p2;
wire   [25:0] grp_fu_1623_p2;
wire   [25:0] grp_fu_1632_p2;
wire   [25:0] grp_fu_1641_p2;
wire   [25:0] grp_fu_1650_p2;
wire   [17:0] mul_ln1148_fu_1659_p0;
wire   [17:0] mul_ln1148_1_fu_1667_p0;
wire  signed [16:0] grp_fu_1675_p0;
wire  signed [25:0] sext_ln1118_fu_1531_p1;
wire  signed [16:0] grp_fu_1675_p1;
wire   [25:0] grp_fu_1675_p2;
reg   [49:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 50'd1;
#0 grp_relu_16_s_fu_818_ap_start_reg = 1'b0;
end

mlp_monte_carlo_bbkb #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
b1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b1_V_address0),
    .ce0(b1_V_ce0),
    .q0(b1_V_q0)
);

mlp_monte_carlo_wcud #(
    .DataWidth( 15 ),
    .AddressRange( 576 ),
    .AddressWidth( 10 ))
w1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w1_V_address0),
    .ce0(w1_V_ce0),
    .q0(w1_V_q0)
);

mlp_monte_carlo_bdEe #(
    .DataWidth( 15 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
b2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b2_V_address0),
    .ce0(b2_V_ce0),
    .q0(b2_V_q0)
);

mlp_monte_carlo_weOg #(
    .DataWidth( 15 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
w2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w2_V_address0),
    .ce0(w2_V_ce0),
    .q0(w2_V_q0)
);

mlp_monte_carlo_bfYi #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
b3_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b3_V_address0),
    .ce0(b3_V_ce0),
    .q0(b3_V_q0)
);

mlp_monte_carlo_wg8j #(
    .DataWidth( 13 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
w3_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w3_V_address0),
    .ce0(w3_V_ce0),
    .q0(w3_V_q0)
);

mlp_monte_carlo_bhbi #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
b4_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b4_V_address0),
    .ce0(b4_V_ce0),
    .q0(b4_V_q0)
);

mlp_monte_carlo_wibs #(
    .DataWidth( 14 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
w4_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_address0),
    .ce0(w4_V_ce0),
    .q0(w4_V_q0)
);

mlp_monte_carlo_wjbC #(
    .DataWidth( 12 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
w5_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w5_V_0_address0),
    .ce0(w5_V_0_ce0),
    .q0(w5_V_0_q0)
);

mlp_monte_carlo_okbM #(
    .DataWidth( 16 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
outputs_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(outputs_V_address0),
    .ce0(outputs_V_ce0),
    .we0(outputs_V_we0),
    .d0(dense4_0_V_reg_748),
    .q0(outputs_V_q0)
);

mlp_monte_carlo_dlbW #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
dense0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense0_V_address0),
    .ce0(dense0_V_ce0),
    .we0(dense0_V_we0),
    .d0(dense0_V_d0),
    .q0(dense0_V_q0)
);

mlp_monte_carlo_dmb6 #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
dense1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense1_V_address0),
    .ce0(dense1_V_ce0),
    .we0(dense1_V_we0),
    .d0(dense1_V_d0),
    .q0(dense1_V_q0)
);

mlp_monte_carlo_dncg #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
dense2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense2_V_address0),
    .ce0(dense2_V_ce0),
    .we0(dense2_V_we0),
    .d0(dense2_V_d0),
    .q0(dense2_V_q0)
);

mlp_monte_carlo_dncg #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
dense3_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense3_V_address0),
    .ce0(dense3_V_ce0),
    .we0(dense3_V_we0),
    .d0(dense3_V_d0),
    .q0(dense3_V_q0)
);

mlp_monte_carlo_dlbW #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
dropout0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dropout0_V_address0),
    .ce0(dropout0_V_ce0),
    .we0(dropout0_V_we0),
    .d0(dense0_V_q0),
    .q0(dropout0_V_q0)
);

mlp_monte_carlo_dmb6 #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
dropout1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dropout1_V_address0),
    .ce0(dropout1_V_ce0),
    .we0(dropout1_V_we0),
    .d0(dense1_V_q0),
    .q0(dropout1_V_q0)
);

mlp_monte_carlo_dncg #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
dropout2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dropout2_V_address0),
    .ce0(dropout2_V_ce0),
    .we0(dropout2_V_we0),
    .d0(dense2_V_q0),
    .q0(dropout2_V_q0)
);

mlp_monte_carlo_dncg #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
dropout3_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dropout3_V_address0),
    .ce0(dropout3_V_ce0),
    .we0(dropout3_V_we0),
    .d0(dense3_V_q0),
    .q0(dropout3_V_q0)
);

relu_16_s grp_relu_16_s_fu_818(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_relu_16_s_fu_818_ap_start),
    .ap_done(grp_relu_16_s_fu_818_ap_done),
    .ap_idle(grp_relu_16_s_fu_818_ap_idle),
    .ap_ready(grp_relu_16_s_fu_818_ap_ready),
    .data_V_address0(grp_relu_16_s_fu_818_data_V_address0),
    .data_V_ce0(grp_relu_16_s_fu_818_data_V_ce0),
    .data_V_we0(grp_relu_16_s_fu_818_data_V_we0),
    .data_V_d0(grp_relu_16_s_fu_818_data_V_d0),
    .data_V_q0(grp_relu_16_s_fu_818_data_V_q0)
);

dut_mac_muladd_16tde #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
dut_mac_muladd_16tde_U2(
    .din0(input_V_q0),
    .din1(w1_V_load_reg_1770),
    .din2(grp_fu_1614_p2),
    .dout(grp_fu_1614_p3)
);

dut_mac_muladd_16tde #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
dut_mac_muladd_16tde_U3(
    .din0(dropout0_V_load_reg_1860),
    .din1(w2_V_load_reg_1865),
    .din2(grp_fu_1623_p2),
    .dout(grp_fu_1623_p3)
);

dut_mac_muladd_16udo #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
dut_mac_muladd_16udo_U4(
    .din0(dropout1_V_q0),
    .din1(w3_V_load_reg_1955),
    .din2(grp_fu_1632_p2),
    .dout(grp_fu_1632_p3)
);

dut_mac_muladd_16vdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
dut_mac_muladd_16vdy_U5(
    .din0(dropout2_V_q0),
    .din1(w4_V_load_reg_2029),
    .din2(grp_fu_1641_p2),
    .dout(grp_fu_1641_p3)
);

dut_mac_muladd_12wdI #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
dut_mac_muladd_12wdI_U6(
    .din0(w5_V_0_load_reg_2080),
    .din1(dropout3_V_load_reg_2075),
    .din2(grp_fu_1650_p2),
    .dout(grp_fu_1650_p3)
);

dut_mul_mul_18ns_xdS #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 34 ))
dut_mul_mul_18ns_xdS_U7(
    .din0(mul_ln1148_fu_1659_p0),
    .din1(p_Val2_s_reg_772),
    .dout(mul_ln1148_fu_1659_p2)
);

dut_mul_mul_18ns_xdS #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 34 ))
dut_mul_mul_18ns_xdS_U8(
    .din0(mul_ln1148_1_fu_1667_p0),
    .din1(p_Val2_4_reg_795),
    .dout(mul_ln1148_1_fu_1667_p2)
);

dut_mac_muladd_17yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
dut_mac_muladd_17yd2_U9(
    .din0(grp_fu_1675_p0),
    .din1(grp_fu_1675_p1),
    .din2(grp_fu_1675_p2),
    .dout(grp_fu_1675_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_relu_16_s_fu_818_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln14_3_fu_1243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33)) | ((icmp_ln14_2_fu_1138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25)))) begin
            grp_relu_16_s_fu_818_ap_start_reg <= 1'b1;
        end else if ((grp_relu_16_s_fu_818_ap_ready == 1'b1)) begin
            grp_relu_16_s_fu_818_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_3_fu_1331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        dense4_0_V_reg_748 <= 16'd9678;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        dense4_0_V_reg_748 <= {{grp_fu_1650_p3[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_823_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i100_reg_784 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        i_0_i100_reg_784 <= i_reg_2093;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        i_0_i104_reg_807 <= i_1_reg_2131;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        i_0_i104_reg_807 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_992_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        i_0_i10_reg_600 <= 6'd0;
    end else if (((icmp_ln16_1_fu_1034_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        i_0_i10_reg_600 <= i_5_reg_1817;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln14_fu_883_p2 == 1'd1))) begin
        i_0_i2_reg_578 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_0_i2_reg_578 <= i_3_reg_1783;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_1_fu_1009_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        i_0_i30_reg_634 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        i_0_i30_reg_634 <= i_6_reg_1878;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        i_0_i3_reg_691 <= i_8_reg_1968;
    end else if (((grp_relu_16_s_fu_818_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        i_0_i3_reg_691 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_1_fu_1096_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        i_0_i40_reg_645 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        i_0_i40_reg_645 <= i_7_reg_1894;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_967_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        i_0_i4_reg_589 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i_0_i4_reg_589 <= i_4_reg_1799;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_1_fu_1121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        i_0_i51_reg_656 <= 5'd0;
    end else if (((icmp_ln16_2_fu_1163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        i_0_i51_reg_656 <= i_9_reg_1912;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        i_0_i5_reg_737 <= i_10_reg_2042;
    end else if (((grp_relu_16_s_fu_818_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        i_0_i5_reg_737 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_2_fu_1226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31))) begin
        i_0_i71_reg_702 <= 5'd0;
    end else if (((icmp_ln16_4_fu_1268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
        i_0_i71_reg_702 <= i_11_reg_1986;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_877_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_0_i_reg_543 <= 7'd0;
    end else if (((icmp_ln16_fu_904_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_0_i_reg_543 <= i_2_reg_1727;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_3_fu_1348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        i_0_reg_487 <= i_12_reg_1687;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_487 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_3_fu_1331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        j_0_0_i_reg_761 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        j_0_0_i_reg_761 <= add_ln16_reg_2060;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j_0_i15_reg_623 <= j_1_reg_1845;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        j_0_i15_reg_623 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        j_0_i56_reg_679 <= j_2_reg_1940;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        j_0_i56_reg_679 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        j_0_i76_reg_725 <= j_3_reg_2014;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        j_0_i76_reg_725 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_0_i_reg_566 <= j_reg_1755;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_0_i_reg_566 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        p_Val2_10_reg_668 <= {{grp_fu_1632_p3[25:10]}};
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        p_Val2_10_reg_668 <= sext_ln15_1_fu_1159_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        p_Val2_12_reg_714 <= {{grp_fu_1641_p3[25:10]}};
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        p_Val2_12_reg_714 <= sext_ln15_2_fu_1264_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        p_Val2_4_reg_795 <= {{grp_fu_1675_p3[25:10]}};
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        p_Val2_4_reg_795 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_6_reg_555 <= {{grp_fu_1614_p3[25:10]}};
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_6_reg_555 <= b1_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        p_Val2_8_reg_612 <= {{grp_fu_1623_p3[25:10]}};
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        p_Val2_8_reg_612 <= sext_ln15_fu_1030_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_823_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_s_reg_772 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        p_Val2_s_reg_772 <= sum_V_fu_1427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_823_p2 == 1'd0))) begin
        phi_ln59_reg_499 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln59_fu_841_p2 == 1'd0))) begin
        phi_ln59_reg_499 <= add_ln59_fu_835_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_841_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln60_reg_510 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln60_fu_853_p2 == 1'd0))) begin
        phi_ln60_reg_510 <= add_ln60_fu_847_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_853_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln61_reg_521 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln61_fu_865_p2 == 1'd0))) begin
        phi_ln61_reg_521 <= add_ln61_fu_859_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_865_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_ln62_reg_532 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln62_fu_877_p2 == 1'd0))) begin
        phi_ln62_reg_532 <= add_ln62_fu_871_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        add_ln16_reg_2060 <= add_ln16_fu_1354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln25_fu_967_p2 == 1'd0))) begin
        dense0_V_addr_reg_1788 <= zext_ln26_fu_979_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln25_1_fu_1096_p2 == 1'd0))) begin
        dense1_V_addr_reg_1883 <= zext_ln26_1_fu_1108_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        dropout0_V_load_reg_1860 <= dropout0_V_q0;
        w2_V_load_reg_1865 <= w2_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        dropout3_V_load_reg_2075 <= dropout3_V_q0;
        w5_V_0_load_reg_2080 <= w5_V_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        i_10_reg_2042 <= i_10_fu_1337_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        i_11_reg_1986 <= i_11_fu_1249_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_12_reg_1687 <= i_12_fu_829_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        i_1_reg_2131 <= i_1_fu_1495_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_2_reg_1727 <= i_2_fu_889_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_3_reg_1783 <= i_3_fu_973_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_4_reg_1799 <= i_4_fu_998_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_5_reg_1817 <= i_5_fu_1015_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_6_reg_1878 <= i_6_fu_1102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_7_reg_1894 <= i_7_fu_1127_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        i_8_reg_1968 <= i_8_fu_1232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i_9_reg_1912 <= i_9_fu_1144_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        i_reg_2093 <= i_fu_1400_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        j_1_reg_1845 <= j_1_fu_1040_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        j_2_reg_1940 <= j_2_fu_1169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        j_3_reg_2014 <= j_3_fu_1274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_1755 <= j_fu_910_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        p_Val2_3_reg_2118 <= p_Val2_3_fu_1477_p3;
        rhs_V_reg_2123 <= rhs_V_fu_1485_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        ret_V_reg_2151 <= ret_V_fu_1526_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_1489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        tmp_12_reg_2146 <= {{mul_ln1148_1_fu_1667_p2[33:23]}};
        trunc_ln1148_1_reg_2141 <= trunc_ln1148_1_fu_1510_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_1394_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        tmp_reg_2108 <= {{mul_ln1148_fu_1659_p2[33:23]}};
        trunc_ln1148_reg_2103 <= trunc_ln1148_fu_1415_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        w1_V_load_reg_1770 <= w1_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        w3_V_load_reg_1955 <= w3_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        w4_V_load_reg_2029 <= w4_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln14_1_fu_1009_p2 == 1'd0))) begin
        zext_ln15_1_reg_1822[5 : 0] <= zext_ln15_1_fu_1021_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln14_2_fu_1138_p2 == 1'd0))) begin
        zext_ln15_2_reg_1917[4 : 0] <= zext_ln15_2_fu_1150_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln14_3_fu_1243_p2 == 1'd0))) begin
        zext_ln15_3_reg_1991[4 : 0] <= zext_ln15_3_fu_1255_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        zext_ln15_4_reg_1742[6 : 0] <= zext_ln15_4_fu_900_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        zext_ln15_5_reg_1832[5 : 0] <= zext_ln15_5_fu_1026_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        zext_ln15_6_reg_1927[4 : 0] <= zext_ln15_6_fu_1155_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        zext_ln15_7_reg_2001[4 : 0] <= zext_ln15_7_fu_1260_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln14_fu_883_p2 == 1'd0))) begin
        zext_ln15_reg_1732[6 : 0] <= zext_ln15_fu_895_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln34_1_fu_1121_p2 == 1'd0))) begin
        zext_ln35_1_reg_1899[5 : 0] <= zext_ln35_1_fu_1133_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (icmp_ln34_2_fu_1226_p2 == 1'd0))) begin
        zext_ln35_2_reg_1973[4 : 0] <= zext_ln35_2_fu_1238_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) & (icmp_ln34_3_fu_1331_p2 == 1'd0))) begin
        zext_ln35_3_reg_2047[4 : 0] <= zext_ln35_3_fu_1343_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln34_fu_992_p2 == 1'd0))) begin
        zext_ln35_reg_1804[6 : 0] <= zext_ln35_fu_1004_p1[6 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b1_V_ce0 = 1'b1;
    end else begin
        b1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        b2_V_ce0 = 1'b1;
    end else begin
        b2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        b3_V_ce0 = 1'b1;
    end else begin
        b3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        b4_V_ce0 = 1'b1;
    end else begin
        b4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        dense0_V_address0 = zext_ln35_fu_1004_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dense0_V_address0 = dense0_V_addr_reg_1788;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dense0_V_address0 = zext_ln26_fu_979_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dense0_V_address0 = zext_ln15_reg_1732;
    end else begin
        dense0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        dense0_V_ce0 = 1'b1;
    end else begin
        dense0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        dense0_V_d0 = 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dense0_V_d0 = p_Val2_6_reg_555;
    end else begin
        dense0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_13_fu_984_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln16_fu_904_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)))) begin
        dense0_V_we0 = 1'b1;
    end else begin
        dense0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        dense1_V_address0 = zext_ln35_1_fu_1133_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        dense1_V_address0 = dense1_V_addr_reg_1883;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        dense1_V_address0 = zext_ln26_1_fu_1108_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        dense1_V_address0 = zext_ln15_1_reg_1822;
    end else begin
        dense1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state18))) begin
        dense1_V_ce0 = 1'b1;
    end else begin
        dense1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        dense1_V_d0 = 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        dense1_V_d0 = p_Val2_8_reg_612;
    end else begin
        dense1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_14_fu_1113_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln16_1_fu_1034_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18)))) begin
        dense1_V_we0 = 1'b1;
    end else begin
        dense1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        dense2_V_address0 = zext_ln35_2_fu_1238_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        dense2_V_address0 = zext_ln15_2_reg_1917;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        dense2_V_address0 = grp_relu_16_s_fu_818_data_V_address0;
    end else begin
        dense2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27))) begin
        dense2_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        dense2_V_ce0 = grp_relu_16_s_fu_818_data_V_ce0;
    end else begin
        dense2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        dense2_V_d0 = p_Val2_10_reg_668;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        dense2_V_d0 = grp_relu_16_s_fu_818_data_V_d0;
    end else begin
        dense2_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln16_2_fu_1163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        dense2_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        dense2_V_we0 = grp_relu_16_s_fu_818_data_V_we0;
    end else begin
        dense2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        dense3_V_address0 = zext_ln35_3_fu_1343_p1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        dense3_V_address0 = zext_ln15_3_reg_1991;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        dense3_V_address0 = grp_relu_16_s_fu_818_data_V_address0;
    end else begin
        dense3_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35))) begin
        dense3_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        dense3_V_ce0 = grp_relu_16_s_fu_818_data_V_ce0;
    end else begin
        dense3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        dense3_V_d0 = p_Val2_12_reg_714;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        dense3_V_d0 = grp_relu_16_s_fu_818_data_V_d0;
    end else begin
        dense3_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln16_4_fu_1268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
        dense3_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        dense3_V_we0 = grp_relu_16_s_fu_818_data_V_we0;
    end else begin
        dense3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        dropout0_V_address0 = zext_ln17_1_fu_1046_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        dropout0_V_address0 = zext_ln35_reg_1804;
    end else begin
        dropout0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18))) begin
        dropout0_V_ce0 = 1'b1;
    end else begin
        dropout0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        dropout0_V_we0 = 1'b1;
    end else begin
        dropout0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        dropout1_V_address0 = zext_ln17_2_fu_1197_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        dropout1_V_address0 = zext_ln35_1_reg_1899;
    end else begin
        dropout1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state28))) begin
        dropout1_V_ce0 = 1'b1;
    end else begin
        dropout1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        dropout1_V_we0 = 1'b1;
    end else begin
        dropout1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        dropout2_V_address0 = zext_ln17_4_fu_1302_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        dropout2_V_address0 = zext_ln35_2_reg_1973;
    end else begin
        dropout2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state36))) begin
        dropout2_V_ce0 = 1'b1;
    end else begin
        dropout2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        dropout2_V_we0 = 1'b1;
    end else begin
        dropout2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        dropout3_V_address0 = zext_ln17_3_fu_1360_p1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        dropout3_V_address0 = zext_ln35_3_reg_2047;
    end else begin
        dropout3_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41))) begin
        dropout3_V_ce0 = 1'b1;
    end else begin
        dropout3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        dropout3_V_we0 = 1'b1;
    end else begin
        dropout3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_relu_16_s_fu_818_data_V_q0 = dense3_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_relu_16_s_fu_818_data_V_q0 = dense2_V_q0;
    end else begin
        grp_relu_16_s_fu_818_data_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        outputs_V_address0 = zext_ln50_fu_1501_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        outputs_V_address0 = zext_ln42_fu_1406_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        outputs_V_address0 = zext_ln82_fu_1366_p1;
    end else begin
        outputs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state41))) begin
        outputs_V_ce0 = 1'b1;
    end else begin
        outputs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_3_fu_1348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        outputs_V_we0 = 1'b1;
    end else begin
        outputs_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        w1_V_ce0 = 1'b1;
    end else begin
        w1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        w2_V_ce0 = 1'b1;
    end else begin
        w2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        w3_V_ce0 = 1'b1;
    end else begin
        w3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        w4_V_ce0 = 1'b1;
    end else begin
        w4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        w5_V_0_ce0 = 1'b1;
    end else begin
        w5_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln46_fu_823_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln59_fu_841_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln60_fu_853_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln61_fu_865_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln62_fu_877_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln14_fu_883_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln16_fu_904_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln25_fu_967_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln34_fu_992_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln14_1_fu_1009_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln16_1_fu_1034_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln25_1_fu_1096_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln34_1_fu_1121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state25 : begin
            if (((icmp_ln14_2_fu_1138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((icmp_ln16_2_fu_1163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state30 : begin
            if (((grp_relu_16_s_fu_818_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((icmp_ln34_2_fu_1226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state33 : begin
            if (((icmp_ln14_3_fu_1243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((icmp_ln16_4_fu_1268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state38 : begin
            if (((grp_relu_16_s_fu_818_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((icmp_ln34_3_fu_1331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state41 : begin
            if (((icmp_ln16_3_fu_1348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state44 : begin
            if (((icmp_ln41_fu_1394_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((icmp_ln49_fu_1489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1117_1_fu_1063_p2 = (zext_ln15_5_reg_1832 + zext_ln1117_2_fu_1059_p1);

assign add_ln1117_2_fu_1187_p2 = (zext_ln15_6_reg_1927 + zext_ln1117_4_fu_1183_p1);

assign add_ln1117_3_fu_1292_p2 = (zext_ln15_7_reg_2001 + zext_ln1117_6_fu_1288_p1);

assign add_ln1117_fu_928_p2 = (zext_ln15_4_reg_1742 + zext_ln1117_fu_924_p1);

assign add_ln16_fu_1354_p2 = (j_0_0_i_reg_761 + 5'd1);

assign add_ln59_fu_835_p2 = (phi_ln59_reg_499 + 6'd1);

assign add_ln60_fu_847_p2 = (phi_ln60_reg_510 + 5'd1);

assign add_ln61_fu_859_p2 = (phi_ln61_reg_521 + 4'd1);

assign add_ln62_fu_871_p2 = (phi_ln62_reg_532 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = p_Val2_3_reg_2118;

assign ap_return_1 = select_ln1148_3_fu_1595_p3;

assign b1_V_address0 = zext_ln15_fu_895_p1;

assign b2_V_address0 = zext_ln15_1_fu_1021_p1;

assign b3_V_address0 = zext_ln15_2_fu_1150_p1;

assign b4_V_address0 = zext_ln15_3_fu_1255_p1;

assign grp_fu_1614_p2 = {{p_Val2_6_reg_555}, {10'd0}};

assign grp_fu_1623_p2 = {{p_Val2_8_reg_612}, {10'd0}};

assign grp_fu_1632_p2 = {{p_Val2_10_reg_668}, {10'd0}};

assign grp_fu_1641_p2 = {{p_Val2_12_reg_714}, {10'd0}};

assign grp_fu_1650_p2 = {{dense4_0_V_reg_748}, {10'd0}};

assign grp_fu_1675_p0 = sext_ln1118_fu_1531_p1;

assign grp_fu_1675_p1 = sext_ln1118_fu_1531_p1;

assign grp_fu_1675_p2 = {{p_Val2_4_reg_795}, {10'd0}};

assign grp_relu_16_s_fu_818_ap_start = grp_relu_16_s_fu_818_ap_start_reg;

assign i_10_fu_1337_p2 = (i_0_i5_reg_737 + 5'd1);

assign i_11_fu_1249_p2 = (i_0_i71_reg_702 + 5'd1);

assign i_12_fu_829_p2 = (i_0_reg_487 + 7'd1);

assign i_1_fu_1495_p2 = (i_0_i104_reg_807 + 7'd1);

assign i_2_fu_889_p2 = (i_0_i_reg_543 + 7'd1);

assign i_3_fu_973_p2 = (i_0_i2_reg_578 + 7'd1);

assign i_4_fu_998_p2 = (i_0_i4_reg_589 + 7'd1);

assign i_5_fu_1015_p2 = (i_0_i10_reg_600 + 6'd1);

assign i_6_fu_1102_p2 = (i_0_i30_reg_634 + 6'd1);

assign i_7_fu_1127_p2 = (i_0_i40_reg_645 + 6'd1);

assign i_8_fu_1232_p2 = (i_0_i3_reg_691 + 5'd1);

assign i_9_fu_1144_p2 = (i_0_i51_reg_656 + 5'd1);

assign i_fu_1400_p2 = (i_0_i100_reg_784 + 7'd1);

assign icmp_ln14_1_fu_1009_p2 = ((i_0_i10_reg_600 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln14_2_fu_1138_p2 = ((i_0_i51_reg_656 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln14_3_fu_1243_p2 = ((i_0_i71_reg_702 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_883_p2 = ((i_0_i_reg_543 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_1034_p2 = ((j_0_i15_reg_623 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln16_2_fu_1163_p2 = ((j_0_i56_reg_679 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln16_3_fu_1348_p2 = ((j_0_0_i_reg_761 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln16_4_fu_1268_p2 = ((j_0_i76_reg_725 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_904_p2 = ((j_0_i_reg_566 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln25_1_fu_1096_p2 = ((i_0_i30_reg_634 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_967_p2 = ((i_0_i2_reg_578 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_1121_p2 = ((i_0_i40_reg_645 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln34_2_fu_1226_p2 = ((i_0_i3_reg_691 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln34_3_fu_1331_p2 = ((i_0_i5_reg_737 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_992_p2 = ((i_0_i4_reg_589 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_1394_p2 = ((i_0_i100_reg_784 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_823_p2 = ((i_0_reg_487 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_1489_p2 = ((i_0_i104_reg_807 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_841_p2 = ((phi_ln59_reg_499 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_853_p2 = ((phi_ln60_reg_510 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_865_p2 = ((phi_ln61_reg_521 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_877_p2 = ((phi_ln62_reg_532 == 4'd15) ? 1'b1 : 1'b0);

assign input_V_address0 = zext_ln17_fu_938_p1;

assign j_1_fu_1040_p2 = (j_0_i15_reg_623 + 7'd1);

assign j_2_fu_1169_p2 = (j_0_i56_reg_679 + 6'd1);

assign j_3_fu_1274_p2 = (j_0_i76_reg_725 + 5'd1);

assign j_fu_910_p2 = (j_0_i_reg_566 + 4'd1);

assign lhs_V_fu_1522_p1 = $signed(outputs_V_q0);

assign mul_ln1148_1_fu_1667_p0 = 34'd83887;

assign mul_ln1148_fu_1659_p0 = 34'd83887;

assign p_Val2_3_fu_1477_p3 = ((tmp_8_fu_1438_p3[0:0] === 1'b1) ? sub_ln1148_1_fu_1471_p2 : sext_ln1148_2_fu_1460_p1);

assign ret_V_fu_1526_p2 = ($signed(lhs_V_fu_1522_p1) - $signed(rhs_V_reg_2123));

assign rhs_V_fu_1485_p1 = p_Val2_3_fu_1477_p3;

assign select_ln1148_2_fu_1581_p3 = ((tmp_10_fu_1556_p3[0:0] === 1'b1) ? sext_ln1148_4_fu_1574_p1 : sext_ln1148_5_fu_1578_p1);

assign select_ln1148_3_fu_1595_p3 = ((tmp_10_fu_1556_p3[0:0] === 1'b1) ? sub_ln1148_3_fu_1589_p2 : sext_ln1148_5_fu_1578_p1);

assign select_ln1148_fu_1463_p3 = ((tmp_8_fu_1438_p3[0:0] === 1'b1) ? sext_ln1148_1_fu_1456_p1 : sext_ln1148_2_fu_1460_p1);

assign sext_ln1118_fu_1531_p1 = $signed(ret_V_reg_2151);

assign sext_ln1148_1_fu_1456_p1 = $signed(tmp_9_fu_1446_p4);

assign sext_ln1148_2_fu_1460_p1 = $signed(tmp_reg_2108);

assign sext_ln1148_4_fu_1574_p1 = $signed(tmp_11_fu_1564_p4);

assign sext_ln1148_5_fu_1578_p1 = $signed(tmp_12_reg_2146);

assign sext_ln15_1_fu_1159_p1 = $signed(b3_V_q0);

assign sext_ln15_2_fu_1264_p1 = $signed(b4_V_q0);

assign sext_ln15_fu_1030_p1 = $signed(b2_V_q0);

assign sub_ln1148_1_fu_1471_p2 = (16'd0 - select_ln1148_fu_1463_p3);

assign sub_ln1148_2_fu_1551_p2 = (33'd0 - trunc_ln1148_1_reg_2141);

assign sub_ln1148_3_fu_1589_p2 = (16'd0 - select_ln1148_2_fu_1581_p3);

assign sub_ln1148_fu_1433_p2 = (33'd0 - trunc_ln1148_reg_2103);

assign sum_V_fu_1427_p2 = ($signed(outputs_V_q0) + $signed(p_Val2_s_reg_772));

assign tmp_10_fu_1556_p3 = p_Val2_4_reg_795[32'd15];

assign tmp_11_fu_1564_p4 = {{sub_ln1148_2_fu_1551_p2[32:23]}};

assign tmp_13_fu_984_p3 = dense0_V_q0[32'd15];

assign tmp_14_fu_1113_p3 = dense1_V_q0[32'd15];

assign tmp_4_fu_916_p3 = {{j_0_i_reg_566}, {6'd0}};

assign tmp_5_fu_1051_p3 = {{j_0_i15_reg_623}, {5'd0}};

assign tmp_6_fu_1175_p3 = {{j_0_i56_reg_679}, {4'd0}};

assign tmp_7_fu_1280_p3 = {{j_0_i76_reg_725}, {4'd0}};

assign tmp_8_fu_1438_p3 = p_Val2_s_reg_772[32'd15];

assign tmp_9_fu_1446_p4 = {{sub_ln1148_fu_1433_p2[32:23]}};

assign trunc_ln1148_1_fu_1510_p1 = mul_ln1148_1_fu_1667_p2[32:0];

assign trunc_ln1148_fu_1415_p1 = mul_ln1148_fu_1659_p2[32:0];

assign w1_V_address0 = zext_ln1117_1_fu_933_p1;

assign w2_V_address0 = zext_ln1117_3_fu_1068_p1;

assign w3_V_address0 = zext_ln1117_5_fu_1192_p1;

assign w4_V_address0 = zext_ln1117_7_fu_1297_p1;

assign w5_V_0_address0 = zext_ln17_3_fu_1360_p1;

assign zext_ln1117_1_fu_933_p1 = add_ln1117_fu_928_p2;

assign zext_ln1117_2_fu_1059_p1 = tmp_5_fu_1051_p3;

assign zext_ln1117_3_fu_1068_p1 = add_ln1117_1_fu_1063_p2;

assign zext_ln1117_4_fu_1183_p1 = tmp_6_fu_1175_p3;

assign zext_ln1117_5_fu_1192_p1 = add_ln1117_2_fu_1187_p2;

assign zext_ln1117_6_fu_1288_p1 = tmp_7_fu_1280_p3;

assign zext_ln1117_7_fu_1297_p1 = add_ln1117_3_fu_1292_p2;

assign zext_ln1117_fu_924_p1 = tmp_4_fu_916_p3;

assign zext_ln15_1_fu_1021_p1 = i_0_i10_reg_600;

assign zext_ln15_2_fu_1150_p1 = i_0_i51_reg_656;

assign zext_ln15_3_fu_1255_p1 = i_0_i71_reg_702;

assign zext_ln15_4_fu_900_p1 = i_0_i_reg_543;

assign zext_ln15_5_fu_1026_p1 = i_0_i10_reg_600;

assign zext_ln15_6_fu_1155_p1 = i_0_i51_reg_656;

assign zext_ln15_7_fu_1260_p1 = i_0_i71_reg_702;

assign zext_ln15_fu_895_p1 = i_0_i_reg_543;

assign zext_ln17_1_fu_1046_p1 = j_0_i15_reg_623;

assign zext_ln17_2_fu_1197_p1 = j_0_i56_reg_679;

assign zext_ln17_3_fu_1360_p1 = j_0_0_i_reg_761;

assign zext_ln17_4_fu_1302_p1 = j_0_i76_reg_725;

assign zext_ln17_fu_938_p1 = j_0_i_reg_566;

assign zext_ln26_1_fu_1108_p1 = i_0_i30_reg_634;

assign zext_ln26_fu_979_p1 = i_0_i2_reg_578;

assign zext_ln35_1_fu_1133_p1 = i_0_i40_reg_645;

assign zext_ln35_2_fu_1238_p1 = i_0_i3_reg_691;

assign zext_ln35_3_fu_1343_p1 = i_0_i5_reg_737;

assign zext_ln35_fu_1004_p1 = i_0_i4_reg_589;

assign zext_ln42_fu_1406_p1 = i_0_i100_reg_784;

assign zext_ln50_fu_1501_p1 = i_0_i104_reg_807;

assign zext_ln82_fu_1366_p1 = i_0_reg_487;

always @ (posedge ap_clk) begin
    zext_ln15_reg_1732[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln15_4_reg_1742[10:7] <= 4'b0000;
    zext_ln35_reg_1804[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln15_1_reg_1822[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln15_5_reg_1832[12:6] <= 7'b0000000;
    zext_ln35_1_reg_1899[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln15_2_reg_1917[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln15_6_reg_1927[10:5] <= 6'b000000;
    zext_ln35_2_reg_1973[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln15_3_reg_1991[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln15_7_reg_2001[9:5] <= 5'b00000;
    zext_ln35_3_reg_2047[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //mlp_monte_carlo
