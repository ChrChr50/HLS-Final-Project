// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _relu_16_s_HH_
#define _relu_16_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct relu_16_s : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > data_V_address0;
    sc_out< sc_logic > data_V_ce0;
    sc_out< sc_logic > data_V_we0;
    sc_out< sc_lv<16> > data_V_d0;
    sc_in< sc_lv<16> > data_V_q0;


    // Module declarations
    relu_16_s(sc_module_name name);
    SC_HAS_PROCESS(relu_16_s);

    ~relu_16_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_fu_51_p2;
    sc_signal< sc_lv<5> > i_reg_73;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > data_V_addr_reg_78;
    sc_signal< sc_lv<1> > icmp_ln25_fu_45_p2;
    sc_signal< sc_lv<5> > i_0_reg_34;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > zext_ln26_fu_57_p1;
    sc_signal< sc_lv<1> > tmp_fu_62_p3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_data_V_address0();
    void thread_data_V_ce0();
    void thread_data_V_d0();
    void thread_data_V_we0();
    void thread_i_fu_51_p2();
    void thread_icmp_ln25_fu_45_p2();
    void thread_tmp_fu_62_p3();
    void thread_zext_ln26_fu_57_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
