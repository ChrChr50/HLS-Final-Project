// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "relu_16_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic relu_16_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic relu_16_s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> relu_16_s::ap_ST_fsm_state1 = "1";
const sc_lv<3> relu_16_s::ap_ST_fsm_state2 = "10";
const sc_lv<3> relu_16_s::ap_ST_fsm_state3 = "100";
const sc_lv<32> relu_16_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> relu_16_s::ap_const_lv32_1 = "1";
const sc_lv<1> relu_16_s::ap_const_lv1_0 = "0";
const sc_lv<5> relu_16_s::ap_const_lv5_0 = "00000";
const sc_lv<32> relu_16_s::ap_const_lv32_2 = "10";
const sc_lv<1> relu_16_s::ap_const_lv1_1 = "1";
const sc_lv<16> relu_16_s::ap_const_lv16_0 = "0000000000000000";
const sc_lv<5> relu_16_s::ap_const_lv5_10 = "10000";
const sc_lv<5> relu_16_s::ap_const_lv5_1 = "1";
const sc_lv<32> relu_16_s::ap_const_lv32_F = "1111";
const bool relu_16_s::ap_const_boolean_1 = true;

relu_16_s::relu_16_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln25_fu_45_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln25_fu_45_p2 );

    SC_METHOD(thread_data_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( data_V_addr_reg_78 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln26_fu_57_p1 );

    SC_METHOD(thread_data_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_data_V_d0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_data_V_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_62_p3 );

    SC_METHOD(thread_i_fu_51_p2);
    sensitive << ( i_0_reg_34 );

    SC_METHOD(thread_icmp_ln25_fu_45_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_34 );

    SC_METHOD(thread_tmp_fu_62_p3);
    sensitive << ( data_V_q0 );

    SC_METHOD(thread_zext_ln26_fu_57_p1);
    sensitive << ( i_0_reg_34 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln25_fu_45_p2 );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "relu_16_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_V_address0, "(port)data_V_address0");
    sc_trace(mVcdFile, data_V_ce0, "(port)data_V_ce0");
    sc_trace(mVcdFile, data_V_we0, "(port)data_V_we0");
    sc_trace(mVcdFile, data_V_d0, "(port)data_V_d0");
    sc_trace(mVcdFile, data_V_q0, "(port)data_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_51_p2, "i_fu_51_p2");
    sc_trace(mVcdFile, i_reg_73, "i_reg_73");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, data_V_addr_reg_78, "data_V_addr_reg_78");
    sc_trace(mVcdFile, icmp_ln25_fu_45_p2, "icmp_ln25_fu_45_p2");
    sc_trace(mVcdFile, i_0_reg_34, "i_0_reg_34");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln26_fu_57_p1, "zext_ln26_fu_57_p1");
    sc_trace(mVcdFile, tmp_fu_62_p3, "tmp_fu_62_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

relu_16_s::~relu_16_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void relu_16_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_34 = i_reg_73.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_34 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln25_fu_45_p2.read(), ap_const_lv1_0))) {
        data_V_addr_reg_78 =  (sc_lv<4>) (zext_ln26_fu_57_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_73 = i_fu_51_p2.read();
    }
}

void relu_16_s::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void relu_16_s::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void relu_16_s::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void relu_16_s::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln25_fu_45_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void relu_16_s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void relu_16_s::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_fu_45_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void relu_16_s::thread_data_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_V_address0 = data_V_addr_reg_78.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_V_address0 =  (sc_lv<4>) (zext_ln26_fu_57_p1.read());
    } else {
        data_V_address0 = "XXXX";
    }
}

void relu_16_s::thread_data_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        data_V_ce0 = ap_const_logic_1;
    } else {
        data_V_ce0 = ap_const_logic_0;
    }
}

void relu_16_s::thread_data_V_d0() {
    data_V_d0 = ap_const_lv16_0;
}

void relu_16_s::thread_data_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_fu_62_p3.read(), ap_const_lv1_1))) {
        data_V_we0 = ap_const_logic_1;
    } else {
        data_V_we0 = ap_const_logic_0;
    }
}

void relu_16_s::thread_i_fu_51_p2() {
    i_fu_51_p2 = (!i_0_reg_34.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_34.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void relu_16_s::thread_icmp_ln25_fu_45_p2() {
    icmp_ln25_fu_45_p2 = (!i_0_reg_34.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_34.read() == ap_const_lv5_10);
}

void relu_16_s::thread_tmp_fu_62_p3() {
    tmp_fu_62_p3 = data_V_q0.read().range(15, 15);
}

void relu_16_s::thread_zext_ln26_fu_57_p1() {
    zext_ln26_fu_57_p1 = esl_zext<64,5>(i_0_reg_34.read());
}

void relu_16_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln25_fu_45_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

