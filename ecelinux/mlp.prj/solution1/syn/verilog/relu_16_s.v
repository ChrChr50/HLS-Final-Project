// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_16_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_we0,
        data_V_d0,
        data_V_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] data_V_address0;
output   data_V_ce0;
output   data_V_we0;
output  [15:0] data_V_d0;
input  [15:0] data_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] data_V_address0;
reg data_V_ce0;
reg data_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_fu_51_p2;
reg   [4:0] i_reg_73;
wire    ap_CS_fsm_state2;
reg   [3:0] data_V_addr_reg_78;
wire   [0:0] icmp_ln25_fu_45_p2;
reg   [4:0] i_0_reg_34;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln26_fu_57_p1;
wire   [0:0] tmp_fu_62_p3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_34 <= i_reg_73;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_34 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_45_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data_V_addr_reg_78 <= zext_ln26_fu_57_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_73 <= i_fu_51_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln25_fu_45_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_45_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_address0 = data_V_addr_reg_78;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_address0 = zext_ln26_fu_57_p1;
    end else begin
        data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_62_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_we0 = 1'b1;
    end else begin
        data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln25_fu_45_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign data_V_d0 = 16'd0;

assign i_fu_51_p2 = (i_0_reg_34 + 5'd1);

assign icmp_ln25_fu_45_p2 = ((i_0_reg_34 == 5'd16) ? 1'b1 : 1'b0);

assign tmp_fu_62_p3 = data_V_q0[32'd15];

assign zext_ln26_fu_57_p1 = i_0_reg_34;

endmodule //relu_16_s
